<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Practical Systems Engineering - Engineering</title><link href="httpsL//johntrinh.net/" rel="alternate"></link><link href="httpsL/johntrinh.net/feeds/engineering.atom.xml" rel="self"></link><id>httpsL//johntrinh.net/</id><updated>2021-02-27T00:00:00-08:00</updated><subtitle>Engineering of the Mind</subtitle><entry><title>Task Conflict in Engineering</title><link href="httpsL/johntrinh.net/task-conflict-in-engineering.html" rel="alternate"></link><published>2021-02-07T00:00:00-08:00</published><updated>2021-02-27T00:00:00-08:00</updated><author><name>John Trinh</name></author><id>tag:None,2021-02-07:httpsL/johntrinh.net/task-conflict-in-engineering.html</id><summary type="html">&lt;p&gt;Why engineers are good at solving problems, and the archetype that technical development teams shouldn't tolerate.&lt;/p&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;Physicist Richard Feynman once said, "The first principle is that you must not fool yourself, and you are the easiest person to fool." One way we fool ourselves is by imagining we know more than we do; we think we are experts.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This past week's episode of the &lt;a href="https://hiddenbrain.org/podcast/the-easiest-person-to-fool/"&gt;Hidden Brain&lt;/a&gt; podcast got me thinking about how engineers deal with this in their everyday work, and how the best teams &amp;amp; companies develop a culture that encourages task conflict without relationship conflict.&lt;/p&gt;
&lt;p&gt;When we think about conflict, we usually think about a disagreement between people where someone takes things personally, as an attack on their character or their beliefs. In the podcast, author Adam Grant describes this as &lt;strong&gt;Relationship Conflict.&lt;/strong&gt; By contrast, &lt;strong&gt;Task Conflict&lt;/strong&gt; is "the idea of debating about different opinions and perspectives; it's potentially constructive because it's actually about trying to get to the truth. It's not personal, it's not emotional, we're not trying to beat up the other person... we're trying to hash out or sort out different views."&lt;/p&gt;
&lt;p&gt;This made me realize that task conflict is something engineers are trained to do intuitively. When we need to develop a solution to a problem, we debate on the physics, math, design approach, costs, and risks of the solution. The goal is always to move the ball towards a technical solution. While it's impossible to completely avoid relationship conflicts, any engineer who's ever contributed meaningfully to an engineering project probably valued creating the most optimal solutions over validating their worth or ego.&lt;/p&gt;
&lt;h1&gt;The Keys to Task Conflict in Engineering&lt;/h1&gt;
&lt;p&gt;Why are engineers able to do this? What is it about our profession that cultivates task conflict while actively rejecting relationship conflict? From my experience, I think there are several keys to our success.&lt;/p&gt;
&lt;h2&gt;The Engineering Process&lt;/h2&gt;
&lt;p&gt;I'll go into detail in a future article, but the process of engineering is inherently problem focused. The process every engineering student is taught in school as part of their fundamentals is reinforced as they become working professionals. The process leaves little room for relationship conflict because such conflict is an inefficient way of problem-solving that distracts from the purpose of the team and the program as a whole.&lt;/p&gt;
&lt;h2&gt;Engineering Leadership&lt;/h2&gt;
&lt;p&gt;The twenty-fourth Unwritten Law of Sytems Engineering states: "You need a management style with a firm manner and that gives the appearance that you know which way to lead. Hang tough."&lt;/p&gt;
&lt;p&gt;Burnout can happen from working unsustainably long hours, but it can also happen when individuals feel like they're fighting against the system rather than being supported by it in order to do their jobs. Engineers show up to problem solve, and when they have to fight uphill in order to execute technical work, that's when burnout happens. In some extreme cases, there is so much friction between company leadership and the technical work that entire teams of engineers will simply leave the company, causing a faiure cascade as junior engineers are left without the guidance formerly provided by their seniors.&lt;/p&gt;
&lt;p&gt;Some of the best managers I've worked with understand that engineering needs to be supported by company leadership in order to thrive. To make their technical programs successful, they created a healthy rivalry with management instead of fighting against it, and shielded their teams from "management BS" when necessary (which was often). These managers effectively isolated any relationship conflict between themselves and management, allowing their team to stay focused on technical work.&lt;/p&gt;
&lt;h2&gt;Believing in 'The Mission'&lt;/h2&gt;
&lt;p&gt;I also call this phenomenon "the thrill of the problem." In Tracy Kidder's famous non-fiction &lt;em&gt;The Soul of a New Machine&lt;/em&gt;, he tells the story of Data General Corporation and the technical development team behind a new minicomputer in the 1980s. One of the focal themes of this story is that many engineers will work their asses off when given a challenging &amp;amp; fulfilling problem to work on — especially under pressure.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The people working on &lt;em&gt;EGO&lt;/em&gt; [...] truly labored. They worked nights. They worked weekends. They argued hotly with each other. "It was the most incredible, soaring experience of my life," said one of them later. And they worked with astonishing speed. Within two months they had a fairly complete specification.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The cult of SpaceX isn't a new thing — it's simply a modern, scaled-up and highly public manifestation of engineering culture that has existed for as long as engineering itself has.&lt;/p&gt;
&lt;h2&gt;Rejecting the "Brilliant Asshole" Archetype&lt;/h2&gt;
&lt;p&gt;In Julie Zhuo's excellent field guide to management, &lt;em&gt;The Making of a Manager&lt;/em&gt;, she describes the one thing you shouldn't tolerate on your team:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;There is a certain archetype of the brilliant lone wolf, who, though he regularly puts others down, manages to come out the hero because he is simply heads and tails more capable than anyone else. It's a romantic notion in popular media — Sherlock Holmes, Miranda Priestly, Tony Stark — but in real life, these people are not who you want on your team no matter how talented they are. Instead of a multiplier effect, you get a divider effect: the presence of this person makes the rest of your team less effective.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I don't think this last point is an axiom like the others. Many engineering teams put up with someone like this on their program, either because of the circumstances — the program doesn't have enough budget to find a replacement — or because the company leadership or technical managers are too inexperienced to recognize the divisive effect this type of person has on the rest of the team.&lt;/p&gt;
&lt;h1&gt;Concluding Thoughts&lt;/h1&gt;
&lt;p&gt;The distinction between task conflict and relationship conflict is an interesting one. We're so used to relationship conflict in popular media and our own lives that we often expect it by default. But engineering culture shows that it's possible to separate the two in order to achieve something greater than any one person.&lt;/p&gt;
&lt;p&gt;The appeal of this to me is that anyone can apply this to their own lives. There's nothing wrong with some healthy conflict between people which helps everyone grow, and to form stronger, more genuine relationships. The problem is often conflict without compassion, which results in toxicity that drives people apart rather than everyone feeling like they're being heard &amp;amp; understood.&lt;/p&gt;
&lt;p&gt;I hope to explore this topic again in deeper detail to look at what makes healthy, authentic relationships, and how engineerieng problem-solving skills fit into this picture.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;References&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;Podcast: https://hiddenbrain.org/podcast/the-easiest-person-to-fool&lt;/li&gt;
&lt;li&gt;Unwritten Laws of Systems Engineering: https://github.com/specifics/aero-structures/blob/master/SysEngLaw.md&lt;/li&gt;
&lt;li&gt;Burnout: https://www.twitch.tv/videos/916814991?t=50m&lt;/li&gt;
&lt;li&gt;"The Making of a Manager" by Julie Zhuo, Portfolio/Penguin (2019): p.73&lt;/li&gt;
&lt;/ol&gt;</content><category term="Engineering"></category><category term="engineering"></category><category term="psychology"></category></entry></feed>